---
title: "Programación funcional en R y como dejar de pensar en bucle"
author: Julen Astigarraga y Verónica Cruz-Alonso
date: today
date-format: "DD/MM/YYYY"
toc: true
format:
  html: default
    # css: styles.css
  gfm: default
editor: visual
editor_options: 
  chunk_output_type: console
number-sections: true
---

![](images/Logo_ecoinf_10.jpg)

## Presentación

Los **objetivos** de este taller son:

-   aprender a escribir funciones

-   aplicar funciones en programación iterativa mediante el paquete {purrr} de {tidyverse}

-   aprender estilos de código que facilitan su comprensión (📝)

### Estructura del curso

+----------------------------------------+-----+
| Bloques                                | Día |
+========================================+=====+
| vero 1                                 | 1   |
+----------------------------------------+-----+
| vero 2                                 | 2   |
+----------------------------------------+-----+
| Programación imperativa                | 3   |
|                                        |     |
| Programación funcional                 |     |
|                                        |     |
| Iteraciones sobre uno y dos argumentos |     |
+----------------------------------------+-----+
| Iteraciones sobre múltiples argumentos | 4   |
|                                        |     |
| Iteraciones sin salida                 |     |
|                                        |     |
| Más variantes de `map()`               |     |
|                                        |     |
| Funcionales predicate y demás          |     |
+----------------------------------------+-----+

### Quiénes somos

![](images/1_N_0YimgDh2_IbBT9jJNtOg.jpg)

Y vosotros ¿quiénes sois?

![QR](images/mentimeter_qr_code.png) <https://www.menti.com/alyyd29vgomt>

## Introducción a la programación funcional

La creciente disponibilidad de datos y de versatilidad de los programas de análisis han provocado el incremento en la cantidad y complejidad de los análisis que realizamos en ecología. Esto hace cada vez más necesaria la eficiencia en el proceso de gestión y análisis de datos. Una de las posibles formas para optimizar estos procesos y acortar los tiempos de trabajo para los usuarios de R es la programación basada en funciones. Las funciones permiten automatizar tareas comunes (por ejemplo, leer diferentes bases de datos) simplificando el código.

Las **funciones** son objetos de R que toman un input y consiguen un output haciendo una acción concreta (funcionalidad específica). Son los *bloques de construcción* fundamentales en cualquier script de R que es un lenguaje funcional.

![](images/function.png)

> Para comprender la computación en R, resultan útiles dos lemas:
>
> \- Todo lo que existe es un objeto.
>
> \- Todo lo que sucede es una llamada a función.
>
> --- John Chambers ([Advanced R](https://adv-r.hadley.nz/index.html))

Se puede llamar a una función a través de otra función e iterar el proceso lo que hace que R sea una herramienta muy potente. Las **iteraciones** sirven para realizar la misma acción a múltiples inputs. Existen dos grandes paradigmas de iteración: la programación imperativa y la programación funcional. En este taller, nos centraremos principalmente en la **programación funcional** y aprenderemos a utilizar el paquete {purrr}, que proporciona funciones para eliminar muchos bucles comunes.

```{r ejemplo_importancia_PF}
#| warning: false

# install.packages("tidyverse")
# install.packages("palmerpenguins")
library(tidyverse)
library(palmerpenguins)

glimpse(penguins)

#
df <- penguins |> 
  select(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g)

df$bill_length_mm <-
  (df$bill_length_mm - min(df$bill_length_mm, na.rm = TRUE)) / (max(df$bill_length_mm, na.rm = TRUE) - min(df$bill_length_mm, na.rm = TRUE))
df$bill_depth_mm <-
  (df$bill_depth_mm - min(df$bill_depth_mm, na.rm = TRUE)) / (max(df$bill_depth_mm, na.rm = TRUE) - min(df$bill_length_mm, na.rm = TRUE))
df$flipper_length_mm <-
  (df$flipper_length_mm - min(df$flipper_length_mm, na.rm = TRUE)) / (max(df$flipper_length_mm, na.rm = TRUE) - min(df$flipper_length_mm, na.rm = TRUE))
df$body_mass_g <-
  (df$body_mass_g - min(df$body_mass_g, na.rm = TRUE)) / (max(df$body_mass_g, na.rm = TRUE) - min(df$body_mass_g, na.rm = TRUE))

#
df <- penguins |> 
  select(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g)

rescale01 <- function(x) {
  rng <- range(x, na.rm = TRUE)   
  (x - rng[1]) / (rng[2] - rng[1]) 
} 

df$bill_length_mm <- rescale01(df$bill_length_mm) 
df$bill_depth_mm <- rescale01(df$bill_depth_mm) 
df$flipper_length_mm <- rescale01(df$flipper_length_mm) 
df$body_mass_g <- rescale01(df$body_mass_g)  

head(df)

#
df <- penguins |> 
  select(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g)

rescaled_df <- lapply(df, rescale01)

head(rescaled_df[[1]])
head(rescaled_df[[4]])

```

Las principales **ventajas de la programación funcional** (uso de funciones e iteraciones) son:

-   Facilidad para ver la intención del código y, por tanto, mejorar la **comprensión** para uno mismo, colaboradores y revisores:
    -   Las funciones tienen un nombre evocativo.
    -   El código queda más ordenado.

💡Los bucles pueden ser más explícitos en cuanto a que se ve claramente la iteración, pero se necesita más tiempo para entender que se está haciendo.

-   **Rapidez** si se necesitan hacer cambios ya que las funciones son piezas independientes que resuelven un problema concreto.
-   **Disminuye la probabilidad de error**.

<!--# Enseñar error de arriba -->

### ¿Cuándo hay que usar una función?

Se recomienda seguir el principio "do not repeat yourself" ([DRY principle](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself#:~:text=%22Don't%20repeat%20yourself%22,redundancy%20in%20the%20first%20place.)): cada unidad de conocimiento o información debe tener una representación única, inequívoca y autoritativa en un sistema.

Escribir una función ya merece la pena cuando has copiado y pegado más de dos veces lo mismo. Cuantas más veces esté repetido un código en más sitios necesitarás actualizarlo si hay algun cambio y más aumenta la probabilidad de error.

## Teoría sobre funciones en R

Las funciones tienen tres componentes:

-   `body()` (*cuerpo*): código dentro de la función.
-   `formals()`: lista de *argumentos* que controlan como se ejecuta la función.
-   `environment()`: la estructura que alimenta el *scoping* de la función, es decir, el *entorno* donde se ubica la función.

```{r componentes}

body(rescale01)
formals(rescale01)
environment(rescale01)

```

💡El [*lexical scoping* (ámbito léxico)](https://adv-r.hadley.nz/functions.html?q=lexica#lexical-scoping) son el conjunto de normas sobre cómo los valores de las variables son extraidos del entorno en cada lenguaje de programación, es decir, como se asocia una variable a un valor. En R tiene cuatro normas básicas, pero la más importante para empezar con programación funcional es el *name masking*: si un argumento no está definido en una función, R buscará ese nombre en el nivel del entorno inmediatamente superior.

```{r environment}

f <- function(x) {
  x + y
}

y <- 100
f(10)

y <- 1000
f(10)

```

Las **funciones primitivas** son la excepción ya que no tienen los citados componentes. Están escritas en C en lugar de en R y sólo aparecen en el paquete *base*. Son más eficientes pero se comportan diferente a otras funciones, así que R Core Team intenta no crear nuevas funciones primitivas. El resto de funciones siguen la estructura indicada arriba.

```{r funciones_primitivas}

sum
body(sum)

```

Según el tipo de output generado hay dos tipos de funciones:

-   Las **funciones de transformación** transforman el objeto que entra en la función (primer argumento) y devuelven otro objeto o el anterior modificado. Los funcionales son tipos especiales de funciones de transformación.

-   Las **funciones secundarias** (*side-effect functions*) tienen efectos colaterales y ejecutan una acción, como guardar un archivo o dibujar un plot. Algunos ejemplos que se usan comunmente son: `library()`, `setwd()`, `plot()`, `write.csv()`... Estas funciones retornan *de forma invisible* el primer argumento, que no se guarda, pero puede ser usado en un pipeline.

💡Los operadores infijos (`+`), de flujo (`for`, `if`), de subdivisión (`[ ]`, `$`), de reemplazo (`<-`) o incluso las llaves (`{ }`) también son funciones. La tilde invertida "\`" permite referirse a funciones o variables que de otro modo tienen "nombre ilegales".

```{r nombres_ilegales}

3 + 2
`+`(3, 2)

for (i in 1:2) print(i)
`for`(i, 1:2, print(i))

```

En general, sintácticamente, las funciones tienen tres componentes:

-   Función `function()` (primitiva)
-   Argumentos: lista de inputs.
-   Cuerpo: trozo de código que sigue a `function()`, tradicionalmente entre llaves.

```{r notaciones}

nombre1_v1 <- function(x, y) {
  paste(x, y, sep = "_") 
}  

nombre1_v2 <- function(x, y) paste(x, y, sep = "_")  

nombre1_v3 <- \(x, y) paste(x, y, sep = "_")  

nombre1_v1("Vero", "Cruz") 
nombre1_v2("Vero", "Cruz") 
nombre1_v3("Vero", "Cruz") 

```

📝 Si la función tiene más de dos lineas es mejor usar llaves siempre para que quede bien delimitada. La llave de apertura nunca debe ir sola pero sí la de cierre (excepto con *else*). Las sangrías también ayudan mucho a entender la jerarquía del código dentro de las funciones. En este sentido recomendamos usar *Code \> Reindent lines/Reformat code* en el menú de RStudio.

En general las funciones tienen un nombre que se ejecuta cuando se necesita como hemos visto hasta ahora, pero esto no es obligatorio. Algunos paquetes como {purrr} o las funciones de la familia `apply` permiten el uso de **funciones anónimas** para iterar.

```{r funciones_anonimas}

nxcaso <- lapply(penguins, function(x) length(unique(x)))

models <- penguins|>
  group_split(species) |>
  map(\(df) lm(body_mass_g ~ bill_length_mm, data = df)) 

```

📝 Mejor reservar el uso de funciones anónimas para funciones cortas y simples. Si la función es larga y ocupa varias líneas mejor darle un nombre.

## Cómo escribir funciones

Imaginad que para un set de datos quisieramos hacer un gráfico de distribución de cada variable, en función de otra variable categórica que nos interese especialmente, para ver como se distribuye.

```{r codigo_repetido}
#| warning: false

glimpse(penguins)

# Nos interesan las diferencias entre especie y sexo

ggplot(penguins, aes(x = species, y = bill_length_mm, color = sex)) +
  geom_point(position = position_jitterdodge(), alpha = 0.3) +
  geom_boxplot(alpha = 0.5) +
  scale_color_manual(values = c("turquoise", "goldenrod1")) +
  theme_light()

ggplot(penguins, aes(x = species, y = bill_depth_mm, color = sex)) +
  geom_point(position = position_jitterdodge(), alpha = 0.3) +
  geom_boxplot(alpha = 0.5) +
  scale_color_manual(values = c("turquoise", "goldenrod1")) +
  theme_light()

ggplot(penguins, aes(x = species, y = island, color = sex)) +
  geom_jitter() +
  scale_color_manual(values = c("turquoise", "goldenrod1")) +
  theme_light()

# Etc
```

Hemos copiado un código más de dos veces para realizar una misma acción (es decir, un gráfico para ver como se distribuye una variable) así que hay que considerar la posibilidad de que estamos necesitando una función. A continuación vamos a seguir unos sencillos pasos para transformar cualquier código repetido en función.

1.  Analizar el código: ¿cuáles son las partes replicadas? ¿cuantos inputs tenemos? ¿cuáles varían y cuáles no?

2.  Simplificar y reanalizar duplicaciones

```{r funcion_simplificar}
#| warning: false

var_cont <- penguins$bill_length_mm
var_cat <- penguins$island

ggplot(penguins, aes(x = species, y = var_cont, color = sex)) +
  geom_point(position = position_jitterdodge(), alpha = 0.3) +
  geom_boxplot(alpha = 0.5) +
  scale_color_manual(values = c("turquoise", "goldenrod1")) +
  theme_light()

ggplot(penguins, aes(x = species, y = var_cat, color = sex)) +
  geom_jitter() +
  scale_color_manual(values = c("turquoise", "goldenrod1")) +
  theme_light()
 
```

```{r funcion_simplificar_2}
#| warning: false

var_cont <- penguins$bill_length_mm
var_cat <- penguins$island
miformato <- list(scale_color_manual(values = c("turquoise", "goldenrod1")),
                  theme_light())

ggplot(penguins, aes(x = species, y = var_cont, color = sex)) +
  geom_point(position = position_jitterdodge(), alpha = 0.3) +
  geom_boxplot(alpha = 0.5) +
  miformato
  
ggplot(penguins, aes(x = species, y = var_cat, color = sex)) +
  geom_jitter() +
  miformato
 
```

```{r funcion_simplificar_3}
#| warning: false

var <- "island"
miformato <- list(scale_color_manual(values = c("turquoise", "goldenrod1")),
                  theme_light())

p <- ggplot(penguins, aes(x = species, y = pull(penguins, var), color = sex)) +
  miformato

if (is.numeric(pull(penguins, var))) {
  
  p + 
    geom_point(position = position_jitterdodge(), alpha = 0.3) +
    geom_boxplot(alpha = 0.5) 
  
} else {
  
  p + 
    geom_jitter()
  
}
 
```

📝 Crear objetos con cálculos intermedios (en el ejemplo, el caso del objeto "p"), es una buena práctica porque deja más claro lo que el código está haciendo.

3.  Elegir un nombre para la función (📝). Idealmente tiene que ser corto y evocar lo que la función hace. En general, debe ser un verbo (p.e. imputar_valores) mientras que los argumentos son nombres (p.e. data, variable, etc.). Usar un nombre para una función está permitido si la función calcula algo muy conocido (p.e. `mean()`) o si sirve para acceder a partes de un objeto (p.e. `residuals()`). También se recomienda evitar verbos muy genéricos (p.e. calcular) y si el nombre tiene varias palabras separarlas con guión bajo o mayúsculas, pero ser consistente. Si programas varias funciones que hacen cosas parecidas se recomienda usar el mismo prefijo para todas (p.e. "str\_" en el paquete {stringr}).

Cuanto más claramente puedas expresar la intención de tu código a través de los nombres de funciones, más fácilmente otros e incluyendo tu mismo en el futuro podrán leer y comprender el código.

```{r nombres_mal}

# Ejemplos de nombres que no hay que usar

T <- FALSE
c <- 10
mean <- function(x) sum(x)

rm(T, c, mean)

```

4.  Enumerar los argumentos dentro de `function()` y poner el código simplificado dentro de las llaves.

```{r funcion_escribir}

# Varias opciones

plot_exp <- function (var) {
  miformato <-
    list(scale_color_manual(values = c("turquoise", "goldenrod1")),
         theme_light())
  p <- ggplot(penguins, aes(x = species, y = .data[[var]], color = sex)) +
    ylab(var) +
    miformato
  if (is.numeric(penguins[[var]])) {
    p +
      geom_point(position = position_jitterdodge(), alpha = 0.3) +
      geom_boxplot(alpha = 0.5)

  } else {
    p +
      geom_jitter()

  }
}

```

📝 Utiliza comentarios (#) para explicar el razonamiento detrás de tus funciones. Se debe evitar explicar qué se está haciendo o cómo, ya que el propio código ya lo comunica. También se recomienda usar \# para separar apartados (Cmd/Ctrl + Shift + R).

5.  Probar con inputs diferentes

```{r funcion_pruebas}

plot_exp(var = "island") 
plot_exp(var = "year") 
plot_exp(var = "body_mass_g") 

```

💡Puedes querer convertir estas pruebas en **test** formales. En funciones complejas sirven para que, aunque hagas cambios, se pueda comprobar que la funcionalidad no se ha roto. Si estás interesado mira este enlace: [https://r-pkgs.org/testing-basics.html](#0){.uri}

#### Ejercicio

Generad una función para estandarizar (es decir, restar la media y dividir por la desviación típica) las variables numéricas de penguins.

📝 Atajo para escribir funciones: escribir la palabra fun + tabulador

### Argumentos

En general hay dos grupos: los que especifican los **datos** y los que especifican **detalles** de la ejecución de la función. Normalmente los que especifican datos se colocan primero y los de detalle después. Estos últimos suelen tener valores por defecto (los más comunes), para cuando no se especifique nada.

<!--# Ver ayuda de quantile -->

📝 Los nombres de los argumentos deben ser cortos y descriptivos. Hay algunos comunes pero poco descriptivos que ya son conocidos para la mayoría de los usuarios y está bien aprovecharlos:

`x, y, z`: vectores

`w`: vector de pesos

`df`: data frame

`i, j`: indices numericos, filas y columnas respectivamente

`n`: longitud o número de filas

`p`: numero de columnas

`na.rm`: valores faltantes

A la hora de ejecutar la función los argumentos se pueden **especificar** utilizando el nombre completo, una abreviatura unequívoca o el órden de su posición (*unnamed arguments*), siendo esta secuencia (nombre \> abreviatura \> posición) el órden de prioridad a la hora de hacer corresponder los argumentos con lo que se escribe.

📝 Generalmente sólo se usa el orden de posición para especificar los primeros argumentos, los más comunes que todo el mundo conoce. Si se cambia un argumento de detalle con valor por defecto conviene poner siempre el combre completo.

📝 Usar espacios antes y después de `=` y después de `,` hace mucho más fácil identificar los argumentos de la función y, en general, todos los componentes.

```{r espacios}

average <- mean(rnorm(10, mean = 50, sd = 25) / 12, trim = 0.2)

average <- mean(rnorm(10,mean=50,sd=25)/12,trim=0.2)

```

Hay un argumento especial llamado `…`, que captura cualquier otro argumento que no se corresponde con los nombrados en la función. Se utiliza para transmitir argumentos a otras funciones incluidas en nuestra función.

```{r argumento_dotdotdot}
#| eval: false

?plot

plot(1:5, 1:5)

plot(1:5, 1:5, main = "Estoy usando argumentos de title()")

```

📝 Usar `…` hace que las funciones sean muy flexibles, pero hace necesario leer cuidadosamente la documentación para poder usarlo. Además, si se escribe mal un argumento no sale error.

```{r dotdotdot_flexibilidad}

sum(1, 2, 5, na.mr = TRUE)
sum(1, 2, NA, na.mr = TRUE)

```

### Valores de retorno

La última expresión ejecutada en una función es el valor de retorno. Es el resultado de ejecutar la función, a no ser que se especifique `invisible()`. Las funciones arrojan un sólo objeto. Si se quieren obtener más, tendrá que ser en formato de lista.

<!--# Se os ocurre algún caso donde usar invisible? -->

📝 La función `return()` se usa para indicar explicitamente qué se quiere obtener en una función. Se recomienda su uso cuando el retorno no se espera al final de la función. P.e. en las ramas de una estructura `if/else()` sobre todo hay alguna rama larga y compleja.

#### Ejercicio

¿Cómo generalizarías la función `plot_exp()` para que te sirviera para cualquier base de datos y cualquier variable categórica?

## Programación imperativa

La mayoría de las personas tiende a programar de forma imperativa, en gran parte debido a que es la metodología que se enseña con más frecuencia en los centros de educación. En la programación imperativa, los scripts tienden a ser largos y cambian gradualmente el estado del programa. Esto a menudo implica el uso de bases de datos temporales que se modifican a lo largo del proceso de análisis. Como resultado, puede resultar más difícil comprender qué se está haciendo en cada paso del script.

Los bucles for y bucles while (for loops y while loops) son recomendables para adentrarse en el mundo de las iteraciones porque hacen que cada iteración sea muy explícita por lo que está claro lo que está ocurriendo.

```{r for}

df_ej <- data.frame(
  a = rnorm(5),
  b = rnorm(5),
  c = rnorm(5)
)

salida <- vector("double", ncol(df_ej)) # 1. salida
for (i in seq_along(df_ej)) {           # 2. secuencia
  salida[[i]] <- max(df_ej[[i]])        # 3. cuerpo
}
salida

```

1.  Salida: aquí determinamos el espacio de la salida. Esto es muy importante para la eficiencia puesto que si aumentamos el tamaño del for loop en cada iteración con `c()`, el bucle for será mucho más lento.

```{r optimizacion}

x <- c()
system.time(
  for(i in 1:20000) {
    x <- c(x, i)
  }
)

y <- vector("double", length = 20000)
system.time(
  for(i in seq_along(y)) {
    y[i] <- i
  }
)

```

2.  Secuencia: aquí determinamos sobre lo que queremos iterar. Cada ejecución del bucle for asignará i a un valor diferente de `seq_along(y)`. Si generamos un vector de longitud cero accidentalmente, si utilizamos `1:length(x)`, podemos obtener un error.

3.  Cuerpo: aquí determinamos lo que queremos que haga cada iteración. Se ejecuta repetidamente, cada vez con un valor diferente para `i`.

Existen distintas [variaciones de los bucles for](https://r4ds.had.co.nz/iteration.html#for-loop-variations): (i) modificar un objeto existente; (ii) bucles sobre nombres o valores; (iii) bucles cuando desconocemos la longitud de la salida; (iv) bucles cuando desconocemos la longitud de la secuencia de entrada, bucles while.

Algunos [errores comunes](https://adv-r.hadley.nz/control-flow.html) cuando se utilizan bucles for (ver 5.3.1 Common pitfalls).

Sin embargo, en R los bucles for no son tan importantes como pueden ser en otros lenguajes porque R es un lenguaje de programación funcional. Esto significa que *es posible envolver los bucles for en una función* y llamar a esa función en vez de utilizar el bucle.

Existe la creencia de que los bucles for son lentos, pero la desventaja real de *los bucles for es que son demasiado flexibles*. Cada funcional está diseñado para una tarea específica, por lo que en cuanto lo ves en el código, inmediatamente sabes por qué se está utilizando. Es decir, la principal ventaja es su claridad al hacer que el código sea más fácil de escribir y de leer (ver este ejemplo avanzado para entenderlo: <https://adv-r.hadley.nz/functionals.html>, 9.3 Purrr style).

De todas formas, nunca os sintáis mal por utilizar un bucle en vez de un funcional. Los funcionales necesitan un paso más de abstracción y pueden requerir tiempo hasta que los comprendamos. Lo más importante es que soluciones el problema y poco a poco ir escribiendo código cada vez más sencillo y elegante. Ver @sec-POO para obtener más información sobre programación imperativa o orientada a objetos.

> Para ser significativamente más fiable, el código debe ser más transparente. En particular, las condiciones anidadas y los bucles deben considerarse con gran recelo. Las esctructuras de control complicados confunden a los programadores. El código desordenado suele ocultar errores.
>
> --- Bjarne Stroustrup ([Advanced R](https://adv-r.hadley.nz/index.html))

!["Representación gráfica del funcionamiento de los bucles for donde se ve claramente que se está realizando una iteración. Ilustración de Allison Horst obtenido de la charla de Hadley Wickham The Joy of Functional Programming (para ciencia de datos)"](images/forloops.png)

!["Representación gráfica del funcionamiento de `map()` donde el foco está en la operación realizada. Ilustración de Allison Horst obtenido de la charla de Hadley Wickham The Joy of Functional Programming (para ciencia de datos)"](images/map_frosting.png)

## Programación funcional

En la programación funcional, las funciones están diseñadas para realizar una única tarea específica, y luego se combinan llamando a estas funciones sucesivamente en el conjunto de datos. Una ventaja significativa de este enfoque es que estas funciones pueden ser reutilizadas en cualquier otro proyecto, lo que facilita la modularidad del código. Además, al estar bien documentadas y ser fácilmente testables, resulta sencillo comprender y mantener el programa.

R es un lenguaje de programación funcional por lo que se basa principalmente en un estilo de resolución de problemas centrado en funciones (<https://adv-r.hadley.nz/fp.html>). Un funcional es una función que toma una función como entrada y devuelve un vector como salida.

```{r ejemplo_funcional}

aleatorizacion <- function(f) {
  f(rnorm(5))
}
aleatorizacion(median)

```

Estilo funcional: primero, solucionamos el problema para un elemento. Después, generamos una función que nos permita envolver la solución en una función. Por último, *aplicamos la función a todos los elementos que estamos interesados.* Es decir, dividimos los problemas grandes en problemas más pequeños y resolvemos cada problema con una o más funciones.

La ventaja de utilizar {purrr} en vez de bucles for es que nos permiten distinguir en funciones los desafíos comunes de manipulación de listas, y por lo tanto cada bucle for tiene su propia función. La familia `apply` de R base soluciona problemas similares, pero {purrr} es más consistente y, por lo tanto, más fácil de aprender. Una vez que dominemos la programación funcional, podremos solventar muchos problemas de iteración con menos código, más facilidad y menos errores.

Iteracionar sobre un vector es tan común que el paquete {purrr} proporciona una familia de funciones (la familia `map()`) para ello. Recordad que los data frames son listas de vectores de la misma longitud por lo que cualquier cálculo por filas o columnas supone iteracionar sobre un vector. Existe una función en {purrr} para cada tipo de salida. Los sufijos indican el tipo de salida que queremos:

-   `map()` genera una lista.
-   `map_lgl()` genera un vector lógico.
-   `map_int()` genera un vector de números enteros.
-   `map_dbl()` genera un vector de números decimales.
-   `map_chr()` genera un vector de caracteres.
-   `map_vec()` genera un tipo arbitrario de vector, como fechas y factores.

💡¿[Por qué está función se llama *map*](https://adv-r.hadley.nz/functionals.html#map)?

```{r map_foco}

map_dbl(df_ej, mean)
df_ej |> 
  map_dbl(mean)

```

Comparando con un bucle el foco está en la operación que se está ejecutando (`mean()`), y no en el código necesario para iterar sobre cada elemento y guardar la salida.

## Iteraciones sobre un argumento

`map_*()` está vectorizado sobre un argumento, e.g. `(x)`, es decir, la función operará en todos los elementos del vector `x`.

### Nuestro primer funcional: generando listas, `map()`

Toma un vector y una función, llama a la función una vez por cada elemento del vector y devuelve los resultados en una lista. `map(1:3, f)` es equivalente a `list(f(1), f(2), f(3))`. Es el equivalente de `lapply()` de R base.

```{r map_ejemplo}

cuadratica <- function(x) {
  x ^ 2
}

map(1:4, cuadratica)

lapply(X = 1:4, FUN = cuadratica)

# algun uso mas interesante
glimpse(penguins)

# atajo para generar una funcion anonima
map(penguins, \(x) length(unique(x)))

# salida dataframe
map_df(penguins, \(x) length(unique(x)))

```

![](images/map.png)

#### Ejercicio

Generad un vector, una función y aplicarle la función a cada uno de los elementos del vector utilizando `map()`. Generad otra función (o puede ser la misma) a la base de datos de penguins.

#### Implementación de map()

```{r map_implementacion}

imple_map <- function(x, f, ...) {
  out <- vector("list", length(x))
  for (i in seq_along(x)) {
    out[[i]] <- f(x[[i]], ...)
  }
  out
}

imple_map(1:4, cuadratica)

```

La función de {purrr} está escrita en C para maximizar el rendimiento, conserva los nombres y admite algunos atajos (e.g. `\(x)`).

### Nuestro segundo funcional: generando vectores, `map_*()`

#### Ejercicio

Dedicadle un par de minutos a entender lo que hacen las siguientes funciones:

```{r map_vectores}

map_lgl(penguins, is.numeric)
penguins_num <- penguins[ , map_lgl(penguins, is.numeric)]
map_dbl(penguins_num, median, na.rm = T)
map_chr(penguins, class)
map_int(penguins, \(x) length(unique(x)))
1:4 |> 
  map_vec(\(x) as.Date(ISOdate(x + 2024, 05, 13)))

```

Los argumentos que varían para cada ejecución vienen antes de la función y los argumentos que son los mismos para cada ejecución vienen después (`na.rm = T`).

![](images/map+fix.png)

R base tiene dos funciones de la familia `apply()` que pueden devolver vectores atómicos: `sapply()` y `vapply()`. Recomendamos evitar `sapply()` porque intenta simplificar el resultado y elige un formato de salida por defecto, pudiendo devolver una lista, un vector o una matriz. `vapply()` es más seguro porque permite indicar el formato de salida con FUN.VALUE. La principal desventaja de `vapply()` es que se necesitan especificar más argumentos que en `map_*()`.

```{r vapply}

vapply(penguins_num, median, na.rm = T, FUN.VALUE = double(1))

```

```{r map_ejemplo_avanzado}

map(penguins, class)

glimpse(penguins)

# quitamos na's
penguins <- penguins |> 
  drop_na()

penguins_nested <- penguins |>
  group_by(species) |>
  nest() |> 
  mutate(
    lm_obj = map(data, \(df) lm(
      bill_length_mm ~ body_mass_g,
      data = df))
  )

# seleccionar cada elemento de la lista
penguins_nested[["lm_obj"]]

penguins_nested |>
  pluck("lm_obj")

```

## Iteraciones sobre múltiples argumentos

### Nuestro tercer funcional: dos entradas, `map2()`

`map2()` está vectorizado sobre dos argumentos, e.g. `(x, y)`

```{r map2_ejemplo}

potencia <- function(base, exponente) {
  base ^ exponente
}

x <- map(1:4, \(x) sample(5))
y <- map(1:4, \(x) sample(5))

map2(x, y, potencia)

```

⚡¡Importante! La primera iteración corresponde al primer valor del vector `x` y al primer valor del vector `y`. La segunda iteración corresponde al segundo valor del vector `x` y al segundo valor del vector `y`. No se hacen todas las combinaciones posibles entre ambos vectores.

![](images/map2.png)

```{r map2_implementacion}

imple_map2 <- function(x, y, f, ...) {
  out <- vector("list", length(x))
  for (i in seq_along(x)) {
    out[[i]] <- f(x[[i]], y[[i]], ...)
  }
  out
}

imple_map2(x, y, potencia)

```

#### Ejercicio {#sec-ejercicio-map2}

A partir del código que se muestra a continuación calculad la correlación entre `bill_length_mm` y `bill_depth_mm` para cada especie de pingüino. Pista: 1-primero tenéis que eliminar los NA's de la lista; 2-luego hay que utilizar `map2_dbl()` para calcular la correlación.

```{r map_2_ejercicio}

penguins_list <- penguins |>
  group_split(species) 

# asi se haria para una sola lista
cor(penguins_list[[2]]$bill_length_mm, penguins_list[[2]]$bill_depth_mm)

```

```{r map2_ejemplo_avanzado}

penguins_nested <- penguins |>
  group_by(species) |>
  nest() |> 
  mutate(
    lm_obj = map(data, \(df) lm(
      bill_length_mm ~ body_mass_g,
      data = df)),
    pred = map2(lm_obj, data,
                \(x, y) predict(x, y))
  )

# unnest()
penguins_nested |> 
  unnest(pred) |> 
  select(!c(data, lm_obj))

```

#### Ejercicio avanzado

Calculad la correlación entre las predicciones y `bill_length_mm`.

### Nuestro cuarto funcional: múltiples entradas, `pmap()`

Toma una lista con cualquier número de argumentos de entrada.

```{r pmap_ejemplo}
# son analogos
map2(x, y, potencia)
pmap(list(x, y), potencia)

z <- map(1:4, \(x) sample(5))

pmap(list(x, y, z), rnorm)
```

Si no nombramos los elementos de la lista, `pmap()` usará los elementos de la lista en su orden para los argumentos consecutivos de la función. De todas formas, creemos que es una buena práctica nombrarlos para que quede muy claro lo que hará la función.

```{r pmap_ejemplo_nombre}
args3 <- list(mean = x, sd = y, n = z)
args3 |> 
  pmap(rnorm)
```

![](images/pmap.png)

#### Ejercicio

Transformad el `map2()` que habéis generado en el ejercicio @sec-ejercicio-map2 a `pmap()`.

## Sin salida

### Nuestro quinto funcional: `walk()`, `walk2()` y `pwalk()`

Cuando queremos utilizar funciones por sus efectos secundarios/side effects (e.g. `ggsave()`) y no por su valor resultante. Lo importante es la acción y no el valor u objeto resultante en R.

#### Ejercicio

En base a lo que dice en la definición sobre la familia `walk()`, corred este código y entended lo que hace.

```{r walk_ejemplo}

penguins_nested <- penguins_nested |> 
  mutate(path = str_glue("results/penguins_{species}.csv"))

penguins_nested

walk2(penguins_nested$data, penguins_nested$path, write_csv)

```

#### Ejercicio avanzado

Generad un ejemplo donde utiliceis `walk2()` para guardar múltiples ggplots. Pista: la primera entrada será el plot que queréis guardar y la segunda el nombre del archivo que le queréis dar.

## Más variantes de `map()`

### `modify()` e `imap()`

`modify()` e `imap()` también son funcionales de la familia map. `modify()` es análogo a `map()` pero devuelve el mismo tipo de resultado que el tipo de entrada.

`imap()` sirve para iterar sobre indices, tanto indices numéricos como nombres. `imap(x, f)` es análogo a `map2(x, names(x), f)` cuando `x` tiene nombres y `map2(x, seq_along(x), f)` cuando no los tiene.

```{r modify_imap}

# modify
map(1:4, cuadratica)

modify(1:4, cuadratica)


# imap
map2(penguins, names(penguins), \(x, y) paste("La columna", y, "tiene", length(unique(x)), "valores unicos contando los NA's"))

imap(penguins, \(x, y) paste("La columna", y, "tiene", length(unique(x)), "valores unicos contando los NA's"))

```

En este curso no los vemos más al detalle porque con los demás funcionales que hemos visto podemos abordar prácticamente todos los problemas sin necesidad de `modify()` e `imap()`, y creemos que es mejor primero aprender los funcionales más utilizados bien. Sin embargo, si alguien está interesado puede consultarlos en: [https://adv-r.hadley.nz/functionals.html](#0), 9.4 Map variants.

💡Ejemplos de algunas tareas específicas con {purrr}: <https://r4ds.hadley.nz/iteration>

## Funcionales predicate y demás

Los predicados son funciones que devuelven un solo TRUE o FALSE (e.g., `is.character()`). Así, un predicado funcional aplica un predicado a cada elemento de un vector: `keep()`, `discard()`, `some()`, `every()`, `detect()`, `detect_index()`... Para más información ver: <https://r4ds.had.co.nz/iteration.html>, 21.9.1 Predicate functions.

```{r ejemplo_predicado_funcional}

penguins |> 
  keep(is.numeric)

penguins |> 
  discard(is.numeric)

penguins |> 
  every(is.numeric)

```

`dplyr::across()` es similar a `map()` pero en lugar de hacer algo con cada elemento de un vector, hace algo con cada columna en un data frame.

`reduce()` es una forma útil de generalizar una función que funciona con dos entradas (función binaria) para trabajar con cualquier número de entradas.

```{r extra}

penguins_scaled <- penguins |>
  mutate(across(where(is.numeric), scale))

ls <- list(
  age = tibble(name = c("Vero", "Julen"), age = c(100, 140)),
  sex = tibble(name = c("Vero", "Julen"), sex = c("F", "M")),
  height = tibble(name = c("Vero", "Julen"), height = c("180", "150"))
)

ls |> 
  reduce(full_join, by = "name")

```

### Operadores funcionales

Cuando utilizamos las funciones `map()` para repetir muchas operaciones, aumenta la probabilidad de que una de esas operaciones falle y no obtenamos ninguna salida. {purrr} proporciona algunos operadores funcionales (function operators) en forma de adverbios para asegurar que un error no arruine todo el proceso: `safely()`, `possibly()`, `quietly()`. Para más información ver: <https://r4ds.had.co.nz/iteration.html>, 21.6 Dealing with failure.

```{r ejemplo_operador_funcional}
#| error: true

x <- list(10, "b", 3)

x |> 
  map(log)

x |> 
  map(safely(log))

x |> 
  map(safely(log)) |> 
  transpose()

x |> 
  map(possibly(log, NA_real_))

```

#### Ejercicio

Aplicad cualquier variante de `map()` junto con un operador funcional a la base de datos penguins.

## Más información

### Paralelización

Se pueden emplear distintos núcleos de la CPU (Central Processing Unit) para ejecutar el mismo proceso con diferentes conjuntos de datos en paralelo, lo que acelera tareas largas. Algunas tareas son especialmente adecuadas para la paralelización, como aquellas que son repetitivas y tienen poca o ninguna dependencia entre sí, salvo el origen de los datos de entrada, lo que permite dividirlas fácilmente en tareas paralelas. Estas tareas suelen ser aquellas que pueden ser resueltas mediante iteraciones como las que hemos visto anteriormente. En teoría, el proceso se acelera en proporción a 1/número de núcleos disponibles, pero en la práctica, hay que tener en cuenta otros factores como el tiempo consumido en transferir datos a cada proceso y el tiempo dedicado a reunir los resultados de los diferentes procesos.

R fue diseñado originalmente para ejecutarse en un solo proceso de CPU debido a que cuando se desarrolló, las CPU en general tenían un único núcleo y la computación paralela no era tan común o no estaba tan desarrollada como lo está hoy en día. Por lo tanto, para aprovechar la paralelización en R, necesitamos recurrir a paquetes adicionales. Sin embargo, es importante tener en cuenta que estos paquetes pueden estar limitados en su uso a casos y tipos de datos específicos.

```{r paralelizacion}
#| eval: false

library(parallel) # detectar numero de cores
library(future) # establecer numero de cores
library(furrr) # paralelizacion con map

detectCores()

# funcion para elevar al cubo un numero
cubo <- function(x) {
  Sys.sleep(1) # simulacion tarea computacionalmente intensiva
  return(x ^ 3)
}

# secuencial
tiempo_inicio <- Sys.time()
resultado <- map(1:10, cubo)
tiempo_final <- Sys.time()
cat("Tiempo de computación:", round(tiempo_final - tiempo_inicio, 1), "seconds\n")

# establecer como vamos a resolver el proceso
# aqui utilizaremos 3 nucleos pero en funcion del numero de nucleos disponibles en tu pc modificad este numero
plan(multisession, workers = 3)

# future_map para ejecutarlo paralelamente
tiempo_inicio <- Sys.time()
resultado <- future_map(1:10, cubo)
tiempo_final <- Sys.time()
cat("Tiempo de computación:", round(tiempo_final - tiempo_inicio, 1), "seconds\n")

# vemos que el tiempo de computacion se ha reducido casi a un 1/3 (aprox. 1/numero de cores)

```

La información aquí expuesta sobre programación paralela está obtenida y mucho más ampliamente explicada en: <https://emf.creaf.cat/workflows/r_parallel_computing_tech_doc/>

### Programación orientada a objetos (POO) {#sec-POO}

> \- Todo lo que existe es un objeto.
>
> --- John Chambers
>
> \- Sin embargo, no todo es orientado a objetos

En R, la programación funcional suele ser más relevante que la programación imperativa o la POO, ya que frecuentemente se abordan problemas complejos descomponiéndolos en funciones simples en lugar de objetos simples.

La principal razón para utilizar la POO es el polimorfismo (del latín "muchas formas"). El polimorfismo permite a un desarrollador considerar la interfaz de una función por separado de su implementación, lo que facilita el uso de la misma función con diferentes tipos de entrada. Para entender esto probar a correr el siguiente código.

```{r polimorfismo}

summary(penguins$bill_depth_mm)
summary(penguins$sex)

```

Podrías pensar que `summary()` utilizara una serie de declaraciones `if-else` pero en este caso solo el autor original podría añadir nuevas implementaciones. Sin embargo, un sistema de POO permite que cualquier desarrollador extienda la interfaz mediante la creación de implementaciones para nuevos tipos de entrada.

En los sistemas de POO, el tipo de un objeto se denomina su clase, y una implementación específica para una clase se conoce como método. En términos generales, una clase define las características de un objeto y los métodos describen las acciones que ese objeto puede realizar. La clase también especifica los campos de datos que cada instancia de esa clase posee.

R base proporciona tres sistemas de POO (S3--que es la más utilizada--, S4 y RC), aunque también existen otros sistemas POO proporcionados por diferentes paquetes CRAN.

```{r objetos}

library(sloop)

is.object(1:5) # objeto base pero no orientada a objetos
otype(1:5) # objeto base 
attr(1:5, "class") # no tienen clase

is.object(penguins) # orientada a objetos
otype(penguins) # S3
attr(penguins, "class") # tienen una clase

ftype(summary) # funcion generica S3
# una funcion generica define la interfaz, que utiliza una implementacion (metodo) diferente dependiendo de la clase del argumento. Acuerdate de la idea del polimorfismo que hemos visto antes ;)

```

Información más detallada sobre [POO](https://adv-r.hadley.nz/oo.html) y [compromisos entre algunos sistemas de POO](https://adv-r.hadley.nz/oo-tradeoffs.html)

Este taller está principalmente basado en la primera edición del libro [R for Data Science](https://r4ds.had.co.nz/) de Hadley Wickham & Garrett Grolemund y la segunda edición del libro [Advanced R](https://adv-r.hadley.nz/index.html) de Hadley Wickham.

### Enlaces de interés

-   [R for data Science (functions)](https://r4ds.had.co.nz/functions.html)

-   [Advanced R (functions)](https://adv-r.hadley.nz/functions.html)

-   [R for data Science (iteration)](https://r4ds.had.co.nz/iteration.html)

-   [Advanced R (functionals)](https://adv-r.hadley.nz/functionals.html)

-   [purrr 1.0.0](https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/)

-   [Learn to purrr (Rebecca Barter)](https://www.rebeccabarter.com/blog/2019-08-19_purrr)

-   [Style guide](http://adv-r.had.co.nz/Style.html)

-   [Quince consejos para mejorar nuestro código y flujo de trabajo con R](https://www.revistaecosistemas.net/index.php/ecosistemas/article/view/2129)

-   [Parallel computation in R](https://emf.creaf.cat/workflows/r_parallel_computing_tech_doc/)

-   [Advanced R (Object-oriented programming)](https://adv-r.hadley.nz/oo.html)

------------------------------------------------------------------------

<details>

<summary>Session Info</summary>

```{r session_info}
Sys.time()
sessionInfo()
```

</details>
