---
title: "Iteraciones"
author: Julen Astigarraga y Verónica Cruz-Alonso
date: 10/16/2023
toc: true
format:
  html: default
    # css: styles.css
  gfm: default
editor: visual
---

```{r instalar_paquetes}

# install.packages("tidyverse")
# install.packages("palmerpenguins")
library(tidyverse)
library(palmerpenguins)

```

<!--# Jul Me ha pedido instalar también git2r ? -->

## Programación imperativa

Los bucles for y bucles while (for loops y while loops) son recomendables para adentrarse en el mundo de las iteraciones porque hacen que cada iteración sea muy explícita por lo que está claro lo que está ocurriendo.

```{r for}

df_ej <- data.frame(
  a = rnorm(5),
  b = rnorm(5),
  c = rnorm(5)
)

salida <- vector("double", ncol(df_ej)) # 1. salida
for (i in seq_along(df_ej)) {           # 2. secuencia
  salida[[i]] <- max(df_ej[[i]])        # 3. cuerpo
}
salida

```

1.  Salida: aquí determinamos el espacio de la salida. Esto es muy importante para la eficiencia puesto que si aumentamos el tamaño del for loop en cada iteración con `c()`, el bucle for será mucho más lento. <!--# Jul Creo que no se entiende por qué c() es peor. Poner ejemplo? -->

2.  Secuencia: aquí determinamos sobre lo que queremos iterar. Cada ejecución del bucle for asignará i a un valor diferente de `seq_along(df)`. Si generamos un vector de longitud cero accidentalmente, si utilizamos `1:length(x)`, podemos obtener un error. <!--# Jul Se puede quitar este ejemplo, creo que se entiende sin el -->

```{r seq_along}

x <- vector("double", 0)
seq_along(x)
1:length(x)

```

3.  Cuerpo: aquí determinamos lo que queremos que haga cada iteración. Se ejecuta repetidamente, cada vez con un valor diferente para `i`.

Existen distintas [variaciones de los bucles for](https://r4ds.had.co.nz/iteration.html#for-loop-variations): (i) modificar un objeto existente; (ii) bucles sobre nombres o valores; (iii) bucles cuando desconocemos la longitud de la salida; (iv) bucles cuando desconocemos la longitud de la secuencia de entrada, bucles while.

Algunos [errores comunes](https://adv-r.hadley.nz/control-flow.html) cuando se utilizan bucles for (ver 5.3.1 Common pitfalls).

Sin embargo, en R los bucles for no son tan importantes como pueden ser en otros lenguajes porque R es un lenguaje de programación funcional. Esto significa que *es posible envolver los bucles for en una función* y llamar a esa función en vez de utilizar el bucle.

Existe la creencia de que los bucles for son lentos, pero la desventaja real de *los bucles for es que son demasiado flexibles*. Cada funcional está diseñado para una tarea específica, por lo que en cuanto lo ves en el código, inmediatamente sabes por qué se está utilizando. Es decir, la principal ventaja es su claridad al hacer que el código sea más fácil de escribir y de leer (ver este ejemplo avanzado para entenderlo: <https://adv-r.hadley.nz/functionals.html>, 9.3 Purrr style).

De todas formas, nunca os sintáis mal por utilizar un bucle en vez de un funcional. Los funcionales necesitan un paso más de abstracción y pueden requerir tiempo hasta que los comprendamos. Lo más importante es que soluciones el problema y poco a poco ir escribiendo código cada vez más sencillo y elegante.

> Para ser significativamente más fiable, el código debe ser más transparente. En particular, las condiciones anidadas y los bucles deben considerarse con gran recelo. Los flujos de control complicados confunden a los programadores. El código desordenado suele ocultar errores.
>
> --- Bjarne Stroustrup ([Advanced R](https://adv-r.hadley.nz/index.html))

![](forloops.png)

!["Illustrations from Hadley Wickham's talk The Joy of Functional Programming (for Data Science)"](map_frosting.png)

<!--# Jul poner en español la fuente y luego un pie de foto con lo que representa -->

## Programación funcional

<!--# Explicar en una frase a que nos referimos con PF? Luego explicaría lo que es un funcional y luego como se trabaja, que es la frase que empieza por "primero" -->

Primero, solucionamos el problema para un elemento. Después, generamos una función que nos permita envolver la solución en una función. Por último, *aplicamos la función a todos los elementos que estamos interesados.*

Un funcional es una función que toma una función como entrada y devuelve un vector como salida.

```{r ejemplo_funcional}

aleatorizacion <- function(f) {
  f(rnorm(5))
}
aleatorizacion(median)

```

La ventaja de utilizar purrr en vez de bucles for es que nos permiten dividir los desafíos comunes de manipulación de listas (que pueden contener diferentes tipos de objetos) en partes independientes, por lo que cada bucle for tiene su propia función. La familia apply de R base soluciona problemas similares, pero purrr es más consistente y, por lo tanto, más fácil de aprender. Una vez que dominemos la programación funcional, podremos solventar muchos problemas de iteración con menos código, más facilidad y menos errores.

Iteracionar sobre un vector es tan común que el paquete {purrr} proporciona una familia de funciones (la familia map) para ello. Recordad que los data frames son listas de vectores de la misma longitud por lo que cualquier cálculo por filas o columnas supone iteracionar sobre un vector. Existe una función en {purrr} para cada tipo de output/resultado. Los sufijos indican el tipo de output que queremos:

-   `map()` genera una lista.
-   `map_lgl()` genera un vector lógico.
-   `map_int()` genera un vector de números enteros.
-   `map_dbl()` genera un vector de números decimales.
-   `map_chr()` genera un vector de caracteres.
-   `map_vec()` genera un tipo arbitrario de vector, como fechas y factores.

💡¿[Por qué está función se llama *map*](https://adv-r.hadley.nz/functionals.html#map)?

```{r map_foco}

map_dbl(df_ej, mean)
df_ej |> 
  map_dbl(mean)

```

Comparando con un bucle el foco está en la operación que se está ejecutando (`mean()`), y no en el código necesario para iterar sobre cada elemento y guardar la salida.

## Iteraciones sobre un argumento

`map_*()` está vectorizado sobre un argumento, e.g. `(x)`<!--# Creo que no se entiende que es estar vectorizado -->

### Nuestro primer funcional: generando listas, `map()`

Toma un vector y una función, llama a la función una vez por cada elemento del vector y devuelve los resultados en una lista. `map(1:3, f)` es equivalente a `list(f(1), f(2), f(3))`. Es el equivalente de `lapply()` de R base.

```{r map_ejemplo}

cuadratica <- function(x) {
  x ^ 2
}

map(1:4, cuadratica)

lapply(X = 1:4, FUN = cuadratica)

# algun uso mas interesante
glimpse(penguins)

#Jul me parece un poco lioso de entender el paso de hacer algo con cada elemento de un vector (figura de abajo) a hacer algo con cada columna de un data frame porque cada columna es un vector a su vez

# atajo de para generar una funcion anonima
map(penguins, \(x) length(unique(x)))

# salida dataframe
map_df(penguins, \(x) length(unique(x)))

```

![](images/map.png)

#### Ejercicio

Generad un vector, una función y aplicarle la función a cada uno de los elementos del vector utilizando `map()`. <!--# Intento enlazarlo con mis ejercicios para que la funciónya la tengan -->

#### Implementación de map()

```{r map_implementacion}

imple_map <- function(x, f, ...) {
  out <- vector("list", length(x))
  for (i in seq_along(x)) {
    out[[i]] <- f(x[[i]], ...)
  }
  out
}

imple_map(1:4, cuadratica)

```

La función de {purrr} está escrita en C para maximizar el rendimiento, conserva los nombres y admite algunos atajos (e.g. `\(x)`).

### Nuestro segundo funcional: generando vectores, `map_*()`

#### Ejercicio

Dedicadle un par de minutos a entender lo que hacen las siguientes funciones:

```{r map_vectores}

map_lgl(penguins, is.numeric)
penguins_num <- penguins[ , map_lgl(penguins, is.numeric)]
map_dbl(penguins_num, median, na.rm = T)
map_chr(penguins, class)
map_int(penguins, \(x) length(unique(x)))
1:4 |> 
  map_vec(\(x) as.Date(ISOdate(x + 2023, 10, 16)))

```

Los argumentos que varían para cada ejecución vienen antes de la función y los argumentos que son los mismos para cada ejecución vienen después (`na.rm = T`).

![](images/map+fix.png)

R base tiene dos funciones de la familia `apply()` que pueden devolver vectores atómicos: `sapply()` y `vapply()`. Recomendamos evitar `sapply()` porque intenta simplificar el resultado y elige un formato de salida por defecto, pudiendo devolver una lista, un vector o una matriz. `vapply()` es más seguro porque permite indicar el formato de salida con FUN.VALUE. La principal desventaja de `vapply()` es que se necesitan especificar más argumentos que en `map_*()`.

```{r vapply}

vapply(penguins_num, median, na.rm = T, FUN.VALUE = double(1))

```

```{r map_ejemplo_avanzado}

map(penguins, \(x) class(x))

glimpse(penguins)

# quitamos na's
penguins <- penguins |> 
  drop_na()

penguins_nested <- penguins |>
  group_by(species) |>
  nest() |> 
  mutate(
    lm_obj = map(data, \(dat) lm(
      bill_length_mm ~ body_mass_g,
      data = dat))
  )

# seleccionar cada elemento de la lista
penguins_nested[["lm_obj"]]

penguins_nested |>
  pluck("lm_obj")

# across para iteracionar sobre columnas
penguins_scaled <- penguins |>
  mutate(across(where(is.numeric), scale))



# Jul next lo explicaria como caso cuando no quieres iterar por columnas sino por grupos

#Jul no sé si dejaría el across para más adelante y que queden claras sus diferencias con hacer map y un select previo. Across es un doble map no? a cada columna le aplicamos un scale (map normal -iteracion por columnas), pero este scale cambia cada valor del vector (segundo map -iteracion por elemento del vector)

```

## Iteraciones sobre múltiples argumentos

### Nuestro tercer funcional: dos entradas, `map2()`

`map2()` está vectorizado sobre dos argumentos, e.g. `(x, y)`

```{r map2_ejemplo}

potencia <- function(base, exponente) {
  base ^ exponente
}

x <- map(1:4, \(x) sample(5))
y <- map(1:4, \(x) sample(5))

map2(x, y, potencia)

```

⚡¡Importante! La primera iteración corresponde al primer valor del vector `x` y al primer valor del vector `y`. La segunda iteración corresponde al segundo valor del vector `x` y al segundo valor del vector `y`. No se hacen todas las combinaciones posibles entre ambos vectores.

![](images/map2.png)

```{r map2_implementacion}

imple_map2 <- function(x, y, f, ...) {
  out <- vector("list", length(x))
  for (i in seq_along(x)) {
    out[[i]] <- f(x[[i]], y[[i]], ...)
  }
  out
}

imple_map2(x, y, potencia)

```

```{r map2_ejemplo_avanzado}

penguins_nested <- penguins |>
  group_by(species) |>
  nest() |> 
  mutate(
    lm_obj = map(data, \(dat) lm(
      bill_length_mm ~ body_mass_g,
      data = dat)),
    pred = map2(lm_obj, data,
                \(x, y) predict(x, y))
  )

# unnest()
penguins_nested |> 
  unnest(pred) |> 
  select(!c(data, lm_obj))

```

#### Ejercicio

Calculad la correlación entre las predicciones y `bill_length_mm`. Pista: hay que utilizar `map2_dbl()`

### Nuestro cuarto funcional: múltiples entradas, `pmap()`

Toma una lista con cualquier número de argumentos de entrada.

```{r pmap_ejemplo}

# son analogos
map2(x, y, potencia)
pmap(list(x, y), potencia)

z <- map(1:4, \(x) sample(5))

pmap(list(x, y, z), rnorm)
# si no nombramos los elementos de la lista, pmap() usara los elementos de la lista en su orden para los argumentos consecutivos de la función
args3 <- list(mean = x, sd = y, n = z)
args3 |> 
  pmap(rnorm)

```

![](images/pmap.png)

## Sin resultado

### Nuestro quinto funcional: `walk()`, `walk2()` y `pwalk()`

Cuando queremos utilizar funciones por sus efectos secundarios/side effects (e.g. `ggsave()`) y no por su valor resultante. Lo importante es la acción y no el valor u objeto resultante en R.

#### Ejercicio

En base a lo que dice en la definición sobre la familia `walk()`, corred este código y entended lo que hace.

```{r walk_ejemplo}

penguins_nested <- penguins_nested |> 
  mutate(path = str_glue("penguins_{species}.csv"))

penguins_nested

walk2(penguins_nested$data, penguins_nested$path, write_csv)

```

DIBUJO VERO <!--# Este dibujo no se si me convence. Esque creo que no aporta mucho porque lo suyo sería dibujar la acción que es el resultado y no se me ocurre -->

💡Ejemplos de algunas tareas específicas con {purrr}: <https://r4ds.hadley.nz/iteration>

## Otras posibles iteraciones

### Operadores funcionales <!--# Jul Haria una apartado para esto fuera de "otras posibles iteraciones" porque no son iteraciones si no modificadores. Me gusta -->

Cuando utilizamos las funciones `map()` para repetir muchas operaciones, aumenta la probabilidad de que una de esas operaciones falle y no obtenamos ningún resultado. {purrr\] proporciona algunos operadores funcionales (function operators) en forma de adverbios para asegurar que un error no arruine todo el proceso: `safely()`, `possibly()`, `quietly()`. Para más información ver: <https://r4ds.had.co.nz/iteration.html>, 21.6 Dealing with failure.

```{r ejemplo_operador_funcional}
#| error: true

x <- list(10, "b", 3)

x |> 
  map(log)

x |> 
  map(safely(log))

x |> 
  map(safely(log)) |> 
  transpose()

x |> 
  map(possibly(log, NA_real_))

```

### Funcionales predicate <!--# Jul Creo que esto lo juntaría con across porque me parece la misma filosofia: selecciono unas columnas y hago cosas jaja-->

Los predicados son funciones que devuelven un solo TRUE o FALSE (e.g., `is.character()`). Así, un predicado funcional aplica un predicado a cada elemento de un vector: `keep()`, `discard()`, `some()`, `every()`, `detect()`, `detect_index()`... Para más información ver: <https://r4ds.had.co.nz/iteration.html>, 21.9.1 Predicate functions.

```{r ejemplo_predicado_funcional}

penguins |> 
  keep(is.numeric)

penguins |> 
  discard(is.numeric)

penguins |> 
  every(is.numeric)

```

### Reduce y Accumulate

`reduce()` es una forma útil de generalizar una función que funciona con dos entradas (función binaria) para trabajar con cualquier número de entradas.

`accumulate()` en lugar de devolver solo el resultado final, devuelve todos los resultados intermedios.

<!--# Jul Esto sería para aplicar iterativamente en cascada no? Quizás lo juntaría con nest porque es como otra forma de iterar (por grupos o en cascada). Creo que quitaría accumulate porque es solo una casuistica de reduce. Me gusta mucho el dibujo que viene en el libro para reduce para entenderlo-->

```{r ejemplo_reduce}

ls <- list(
  age = tibble(name = c("Vero", "Julen"), age = c(100, 140)),
  sex = tibble(name = c("Vero", "Julen"), sex = c("F", "M")),
  height = tibble(name = c("Vero", "Julen"), height = c("180", "150"))
)

ls |> 
  reduce(full_join, by = "name")

```

Este taller está principalmente basado en la primera edición del libro [R for Data Science](https://r4ds.had.co.nz/) de Hadley Wickham & Garrett Grolemund y la segunda edición del libro [Advanced R](https://adv-r.hadley.nz/index.html) de Hadley Wickham.

## Más información

-   R for data Science (functions): <https://r4ds.had.co.nz/functions.html>

-   Advanced R (functions): <https://adv-r.hadley.nz/functions.html>

-   R for data Science (iteration): <https://r4ds.had.co.nz/iteration.html>

-   Advanced R (functionals): <https://adv-r.hadley.nz/functionals.html>

-   purrr 1.0.0: <https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/>

-   Learn to purrr (Rebecca Barter): <https://www.rebeccabarter.com/blog/2019-08-19_purrr>

-   Sacando el máximo partido a Tidyverse: <https://github.com/Julenasti/intro_tidyverse/blob/main/04-scripts/intro_tidyverse.md>

-   R for Data Science (2e): <https://r4ds.hadley.nz/>

### No directamente relacionado pero útil

-   Style guide: <http://adv-r.had.co.nz/Style.html>

-   Quince consejos para mejorar nuestro código y flujo de trabajo con R: <https://www.revistaecosistemas.net/index.php/ecosistemas/article/view/2129>

------------------------------------------------------------------------

<details>

<summary>Session Info</summary>

```{r session-info}
Sys.time()
git2r::repository()
sessionInfo()
```

</details>
