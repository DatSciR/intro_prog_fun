---
title: "Programación funcional en R - ejercicios resueltos"
author: Julen Astigarraga y Verónica Cruz-Alonso
date: today
date-format: "DD/MM/YYYY"
toc: true
format:
  html: default
    # css: styles.css
  gfm: default
editor: visual
editor_options: 
  chunk_output_type: console
number-sections: false
---

## 2.1.1 Ejercicio

1.  Elije un número y multiplicalo por 3

2.  Crea un objeto que contenga 100 valores entre 1901 y 2000

3.  Suma un número a tu objeto

4.  Multiplica tu objeto por sí mismo

```{r 2.1.1}

# 1
10 * 3

# 2
misvalores <- 1901:2000

# 3
misvalores + 5

# 4
misvalores * misvalores

```

## 2.2.1 Ejercicio

1.  Crea un objeto con los pingüinos de la especie Adelie y ordena la tabla según la longitud del ala de los individuos.

2.  Crea un objeto a partir del anterior donde selecciones la isla y las variables relacionadas con el pico.

3.  Crea un objeto a partir del creado en el punto 1 donde selecciones todo menos la especie.

```{r 2.2.1}

library(palmerpenguins)
library(tidyverse)

# 1
adelie <- penguins |> 
  filter(species == "Adelie") |> 
  arrange(flipper_length_mm)

# 2
adelie_subset <- adelie |> 
  select(island, contains("bill"))

# 3
adelie2 <- adelie |> 
  select(-species)
```

## 2.2.2 Ejercicio

1.  Con el `data.frame` penguins, cuenta el número de casos que hay en cada isla y calcula la media de la longitud del ala en cada isla.

2.  Con el mismo `data.frame` calcula la relación entre el peso en kg y la longitud del ala para cada individuo.

```{r 2.2.2}

# 1
penguins |> 
  group_by(island) |> 
  summarise(
    n = n(),
    mean_flipper_length = mean(flipper_length_mm, na.rm = TRUE)
  )

# 2
penguins |> 
  mutate(mass_by_length = (body_mass_g / 1000) / flipper_length_mm) |> 
  select(mass_by_length, everything())

```

## 5.0.1 Ejercicio

Genera tu primera función que divida un valor siempre entre 100.

```{r 5.0.1}

dividirpor100 <- function(x) {
  x / 100
}

dividirpor100(30)

```

## 5.0.2 Ejercicio

Genera una función para estandarizar (es decir, restar la media y dividir por la desviación típica) las variables numéricas de penguins.

```{r 5.0.2}

# R base
estandarizar <- function(x, my.na.rm) {
  (x - mean(x, na.rm = my.na.rm)) / sd(x, na.rm = my.na.rm)
}

estandarizar(penguins$bill_length_mm, my.na.rm = T)

# Tidyverse
estandarizar_tidy <- function(x, my.na.rm) {
  ({{ x }} - mean({{ x }}, na.rm = my.na.rm)) / sd({{ x }}, na.rm = my.na.rm)
} 

penguins |> 
  mutate(st_bill_length = estandarizar_tidy(x = bill_length_mm, my.na.rm = T)) |> 
  select(bill_length_mm, st_bill_length)

```

## 5.2.1 Ejercicio

¿Cómo generalizarías la función `explorar_penguins()` para que te sirviera para cualquier base de datos?

```{r 5.2.1}

penguins_num <- penguins |> 
  select(species, sex, where(is.numeric))

explorar_penguins <-
  function(var) {
    ggplot(penguins_num, aes(x = species, y = .data[[var]], color = sex)) +
      geom_point(position = position_jitterdodge(), alpha = 0.3) +
      geom_boxplot(alpha = 0.5) +
      scale_color_manual(values = c("turquoise", "goldenrod1")) +
      theme_light() +
      ylab(var)
  }

explorar_penguins(var = "body_mass_g") 

explorar_df <- function(df, x_var, y_var, color) {
  ggplot(data = df, aes(x = .data[[x_var]], y = .data[[y_var]], color = .data[[color]])) + 
    geom_point(position = position_jitterdodge(), alpha = 0.3) +
    geom_boxplot(alpha = 0.5) + 
    scale_color_manual(values = rainbow(n = length(unique(df[[color]])))) +
    theme_light() + 
    ylab(y_var)
}

explorar_df(df = iris, # iris es un dataset cargado en RStudio por defecto
            y_var = "Petal.Length",
            x_var = "Species",
            color = "Species")

```

## 8.1.1 Ejercicio

Generad un vector, una función y aplicadle la función a cada uno de los elementos del vector utilizando map().

```{r 8.1.1}

sum_10 <- function(x) {
  x + 10
}

map(1:4, sum_10)

```

## 8.1.2 Ejercicio

Ahora que habéis entendido la lógica de `map()`, detectad las diferencias entre las tres líneas de código siguientes. ¿Qué es lo que hace el funcional `map()`? ¿Qué diferencias detectáis en el código? ¿Y en la salida?

```{r 8.1.2}

map(penguins, \(x) mean(x))
map(penguins, \(x) mean(x, na.rm = T)) # opcion 1
map(penguins, mean, na.rm = T) # opcion 2

```

El primer y segundo `map()` utilizan funciones anónimas (`\(x)`) mientras que el tercero no lo hace. El primero nos devuelve muchos `NA` porque hay algunas celdas de variables numéricas en la base de datos de penguins que contienen `NA`, y por defecto, `mean()` devuelve `NA` si detecta algún `NA` en las variables a las que se aplica el `mean()`. El resultado del segundo y tercer `map()` es el mismo. Sin embargo, en el segundo `map()` se pasan argumentos adicionales a `mean()` mediante la función anónima. En el tercer `map()`, dado que `map()` incluye `...` entre sus argumentos, se pueden incluir los argumentos adicionales después de la función dentro de `map()` de una forma mucho más sencilla.

## 8.2.1 Ejercicio

Dedicadle un par de minutos a entender lo que hacen las siguientes funciones:

```{r 8.2.1}

map_lgl(penguins, is.numeric)
penguins_num <- penguins[ , map_lgl(penguins, is.numeric)] 
map_dbl(penguins_num, median, na.rm = T)
map_chr(penguins, class)
map_int(penguins, \(x) length(unique(x)))
1:4 |> 
  map_vec(\(x) as.Date(ISOdate(x + 2024, 05, 13)))

```

`map_lgl()` nos devuelve un vector lógico que nos indica si cada una de las columnas de penguins es numérico o no.

En la siguiente linea utilizamos el vector lógico generado con `map_lgl()` para seleccionar las variables númericas de penguins.

`map_dbl()` nos devuelve un vector numérico calculando la mediana de cada variable númerica de penguins.

`map_chr()` nos devuelve un vector de caracteres que nos indica de qué clase es cada una de las columnas de penguins.

`map_int()` nos devuelve un vector de números enteros que nos el número de observaciones únicas que hay en cada variable de penguins contando los `NA`.

`map_vec()` determina automáticamente el tipo de salida que en este caso nos devuelve un vector de tipo fecha.

## 9.1.1 Ejercicio

A partir del código que se muestra a continuación generad un `data.frame`, agregando una columna al `data.frame` con el nombre que le hemos asignado a cada lista.

```{r 9.1.1}

penguins_list <- penguins |>
  group_split(species)

# asignamos nombres a las listas
names(penguins_list) <- c("p1", "p2", "p3")

# solucion al ejercicio
map2(penguins_list, names(penguins_list), \(x, y)
        mutate(x, nombre = y))

```

## 9.1.2 Ejercicio avanzado

Calculad la correlación entre las predicciones guardadas en la lista-columna `pred` y `bill_length_mm`.

```{r 9.1.2}

# primero eliminamos NA de bill_length_mm
penguins_nona <- penguins |> 
  drop_na(bill_length_mm)

penguins_nested <- penguins_nona |>
  group_by(species) |>
  nest() |> 
  mutate(
    lm_obj = map(data, \(df) lm(
      bill_length_mm ~ body_mass_g,
      data = df)),
    pred = map2(lm_obj, data,
                \(x, y) predict(x, y)),
    # solucion al ejercicio
    corr = map2_dbl(pred, data,
                    \(x, y) cor(x, y$bill_length_mm))
  )

# unnest()
penguins_nested |> 
  unnest(pred) |> 
  select(!c(data, lm_obj))

```

## 9.2.1 Ejercicio

Transformad el `map2()` que habéis generado en el ejercicio 9.1.1 a `pmap()`.

```{r 9.2.1}

# ejercicio 9.1.1
penguins_list <- penguins |>
  group_split(species)

# asignamos nombres a las listas
names(penguins_list) <- c("p1", "p2", "p3")

# ejercicio 9.2.1
pmap(list(penguins_list, names(penguins_list)), \(x, y)
     mutate(x, nombre = y))

```

## 10.1.1 Ejercicio

En base a lo que dice en la definición sobre la familia `walk()`, corred este código y entended lo que hace.

```{r 10.1.1}

penguins_nested <- penguins |>
  group_by(species) |>
  nest()

penguins_nested_str <- penguins_nested |> 
  mutate(path = str_glue("penguins_{species}.csv"))

penguins_nested_str

walk2(penguins_nested_str$data, penguins_nested_str$path, write_csv)

```

Meidante la función [`nest()`](https://tidyr.tidyverse.org/reference/nest.html) de {tidyr} generamos listas-columnas en el data frame de penguins, generando una fila para cada especie de pingüino. Como es un `data.frame` podemos aplicarle la función `mutate()` directamente y generamos la variable `path` que contiene el nombre de salida que le queremos dar a cada base de datos. Por último, mediante la función `walk2()` guardamos los datos relativos a cada pingüino con su respectivo path que hemos generado anteriormente.

## 10.1.2 Ejercicio avanzado

Generad un ejemplo donde utiliceis `walk2()` o `pwalk()` para guardar múltiples plot generados con `ggplot()`. Pista: la primera entrada será el plot que queréis guardar y la segunda el nombre del archivo que le queréis dar.

```{r 10.1.2}

gg_penguins_bill_body <- function(data_df) {
  ggplot(aes(bill_length_mm, body_mass_g),
         data = data_df) +
    geom_point()
}

penguins_nested <- penguins |>
  group_by(species) |>
  nest() |> 
  mutate(
    gg_obj = map(data, \(df) gg_penguins_bill_body(
      data_df = df
    ))
  )

penguins_nested_str <- penguins_nested |> 
  mutate(path = str_glue("penguins_{species}.png"))

penguins_nested_str

pwalk(list(plot = penguins_nested_str$gg_obj, filename = penguins_nested_str$path), ggsave)

```

## 11.2.1.1 Ejercicio

Aplicad cualquier variante de `map()` junto con un operador funcional a la base de datos penguins.

```{r 11.2.1.1}

penguins |> 
  map(safely(log)) |> 
  transpose()

```

<details>

<summary>Session Info</summary>

```{r session_info}
Sys.time()
sessionInfo()
```

</details>
