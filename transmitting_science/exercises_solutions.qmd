---
title: "Functional Programming with R"
author: Julen Astigarraga y Ver√≥nica Cruz-Alonso
date: today
date-format: "DD/MM/YYYY"
toc: true
format:
  html: default
    # css: styles.css
  gfm: default
editor: visual
editor_options: 
  chunk_output_type: console
number-sections: false
---

## 2.2.1 Exercise

1.  With the penguins dataset, create an object with individuals of the Adelie species and arrange the `data.frame` according to flipper length.

2.  Create an object from the previous one where you select the island and the variables related to the bill.

3.  Create an object from the one created in step 1 where you select everything except the species.

```{r 2.2.1}

library(palmerpenguins)
library(tidyverse)

# 1
adelie <- penguins |> 
  filter(species == "Adelie") |> 
  arrange(flipper_length_mm)

# 2
adelie_subset <- adelie |> 
  select(island, contains("bill"))

# 3
adelie2 <- adelie |> 
  select(-species)

```

## 2.2.2 Exercise

1.  With the penguins dataset, count the number of cases on each island and calculate the mean flipper length for each island.

2.  Calculate the ratio between the weight in kg and the flipper length for each individual.

```{r 2.2.2}

# 1
penguins |> 
  group_by(island) |> 
  summarise(
    n = n(),
    mean_flipper_length = mean(flipper_length_mm, na.rm = TRUE)
  )

# 2
penguins |> 
  mutate(mass_by_length = (body_mass_g / 1000) / flipper_length_mm) |> 
  select(mass_by_length)

```

## 5.0.1 Exercise

Create your first function that fulfills the functionality of dividing any value by 100.

```{r 5.0.1}

divide_by_100 <- function(x) {
  x / 100
}

divide_by_100(30)

```

## 5.0.2 Exercise

Create a function to standardize (i.e., subtract the mean and divide by the standard deviation) the numerical variables of the penguins dataset.

```{r 5.0.2}

# R base
standardise <- function(x, my.na.rm) {
  (x - mean(x, na.rm = my.na.rm)) / sd(x, na.rm = my.na.rm)
}

standardise(penguins$bill_length_mm, my.na.rm = T)

# Tidyverse
standardise_tidy <- function(x, my.na.rm) {
  ({{ x }} - mean({{ x }}, na.rm = my.na.rm)) / sd({{ x }}, na.rm = my.na.rm)
} 

penguins |> 
  mutate(st_bill_length = standardise_tidy(x = bill_length_mm, my.na.rm = T)) |> 
  select(bill_length_mm, st_bill_length)

```

## 5.2.1 Exercise

How would you generalize the function `explore_penguins()` so you can use any data frame as input?

```{r 5.2.1}

penguins_num <- penguins |> 
  select(species, sex, where(is.numeric))

explore_penguins <-
  function(var) {
    ggplot(penguins_num, aes(x = species, y = .data[[var]], color = sex)) +
      geom_point(position = position_jitterdodge(), alpha = 0.3) +
      geom_boxplot(alpha = 0.5) +
      scale_color_manual(values = c("turquoise", "goldenrod1")) +
      theme_light() +
      ylab(var)
  }

explore_penguins("body_mass_g")

explore_df <- function(df, x_var, y_var, color) {
  ggplot(data = df, aes(x = .data[[x_var]], y = .data[[y_var]], color = .data[[color]])) + 
    geom_point(position = position_jitterdodge(), alpha = 0.3) +
    geom_boxplot(alpha = 0.5) + 
    scale_color_manual(values = rainbow(n = length(unique(df[[color]])))) +
    theme_light() + 
    ylab(y_var)
}

explore_df(df = iris, # iris is a dataset loaded in RStudio by default
           y_var = "Petal.Length",
           x_var = "Species",
           color = "Species")

```

## 8.1.1 Exercise

Generate a vector, a function and apply the function to each of the elements of the vector using `map()`.

```{r 8.1.1}

sum_10 <- function(x) {
  x + 10
}

map(1:4, sum_10) 
```

## 8.1.2 Exercise

Now that you have understood the logic of `map()`, spot the differences between the following three lines of code. What does the `map()` functional do? What differences do you detect in the code? And at the output?

```{r 8.1.2}

map(penguins, \(x) mean(x)) 
map(penguins, \(x) mean(x, na.rm = T)) # option 1 
map(penguins, mean, na.rm = T) # option 2 
```

The first and second `map()` use anonymous functions (`\(x)`) while the third does not. The first returns many `NA` because some cells of numeric variables in the penguins dataset contain `NA`, and by default, `mean()` returns `NA` if it detects any `NA` in the variables to which `mean()` is applied. The result of the second and third `map()` is the same. However, in the second `map()`, additional arguments are passed to `mean()` through the anonymous function. In the third `map()`, since `map()` includes `...` among its arguments, additional arguments can be included after the function within `map()` in a much simpler way. The additional arguments can be used for any function included in the iteration.

## 8.2.1 Exercise

Take a couple of minutes to understand what the following functions do:

```{r 8.2.1}

map_lgl(penguins, is.numeric) 
penguins_num <- penguins[ , map_lgl(penguins, is.numeric)]  

map_dbl(penguins_num, median, na.rm = T) 
map_chr(penguins, class) 
map_int(penguins, \(x) length(unique(x))) 
1:4 |>   
  map_vec(\(x) as.Date(ISOdate(x + 2024, 05, 13))) 
```

`map_lgl()` returns a logical vector indicating whether each column in the penguins dataset is numeric or not.

In the next line, we use the logical vector generated by `map_lgl()` to select the numeric variables from the penguins dataset.

`map_dbl()` returns a numeric vector by calculating the median of each numeric variable in the penguins dataset.

`map_chr()` returns a character vector indicating the class of each column in the penguins dataset.

`map_int()` returns an integer vector that gives the number of unique observations in each variable of the penguins dataset, including NA.

`map_vec()` automatically determines the output type, which in this case, returns a vector of type date.

## 9.1.1 Exercise

From the code shown below, generate a `data.frame`, adding a column to the `data.frame` with the name that we have assigned to each list.

```{r 9.1.1}

penguins_list <- penguins |>   
  group_split(species)  

# we assign names to the list
names(penguins_list) <- c("p1", "p2", "p3")  

# solution:
map2(penguins_list, names(penguins_list), \(df, name) mutate(df, name = name)) 

```

## 9.1.2 Advanced exercise

Calculate the correlation between the predictions stored in the list-column `pred` and `bill_length_mm`.

```{r 9.1.2}

# first we remove NA values from bill_length_mm 
penguins_nona <- penguins |>    
  drop_na(bill_length_mm) 

penguins_nested <- penguins_nona |>   
  group_by(species) |>   
  nest() |>    
  mutate(     
    lm_obj = map(data, \(df) lm(       
      bill_length_mm ~ body_mass_g,       
      data = df)),     
    pred = map2(lm_obj, data, \(x, y) predict(x, y)),
    # solution:     
    corr = map2_dbl(pred, data, \(x, y) cor(x, y$bill_length_mm))   
    )  

# unnest() 
penguins_nested |>    
  unnest(pred) |>    
  select(!c(data, lm_obj)) 
```

## 9.2.1 Exercise

Transform the `map2()` that you have generated in the exercise 9.1.1 to `pmap()`.

```{r 9.2.1}

# exercise 9.1.1 
penguins_list <- penguins |>   
  group_split(species)  

# we assign names to the list
names(penguins_list) <- c("p1", "p2", "p3")  

# exercise 9.2.1 
pmap(list(penguins_list, names(penguins_list)), 
  \(df, name) mutate(df, name = name)) 

```

## 10.1.1 Exercise

Based on what it says in the definition about the `walk()` family, run this code and understand what it does.

```{r 10.1.1}

penguins_nested <- penguins |>   
  group_by(species) |>   
  nest()  

penguins_nested_str <- penguins_nested |>    
  mutate(path = str_glue("penguins_{species}.csv")) 

penguins_nested_str  

walk2(penguins_nested_str$data, penguins_nested_str$path, write_csv) 

```

Using the `nest()` function from {tidyr}, we generate list-columns in the penguins data frame, creating a row for each penguin species. Since it is a data frame, we can directly apply the `mutate()` function to it, generating the `path` variable that contains the output name we want to assign to each dataset. Finally, using the `walk2()` function, we save the data related to each penguin with its respective path that we generated earlier. We could substitute walk2 by map2 and files would be created as well, but also it would return the output in the console and we don't need it.

## 10.1.2 Advanced exercise

Generate an example where you use `walk2()` or `pwalk()` to save multiple plots generated with `ggplot()`. Hint: the first entry will be the plot you want to save and the second the name of the file you want to give it.

```{r 10.1.2}

gg_penguins_bill_body <- function(data_df) {
  ggplot(data = data_df, aes(x = bill_length_mm, y = body_mass_g)) +     
    geom_point()
}  

penguins_nested <- penguins |>   
  group_by(species) |>   
  nest() |>   
  mutate(gg_obj = map(data, 
    \(df) gg_penguins_bill_body(data_df = df))) 

penguins_nested_str <- penguins_nested |>    
  mutate(path = str_glue("penguins_{species}.png"))  

penguins_nested_str  

pwalk(list(plot = penguins_nested_str$gg_obj, filename = penguins_nested_str$path),
  ggsave) 
```

## 11.3.1 Ejercicio

Use any variant of `map()` along with a function operator to the penguins database.

```{r 11.3.1}

penguins |>    
  map(safely(log)) |>    
  transpose() 
```

<details>

<summary>Session Info</summary>

```{r session_info}
Sys.time()
sessionInfo()
```

</details>
